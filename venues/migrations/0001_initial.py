# Generated by Django 4.0.2 on 2022-12-20 08:41

import ckeditor.fields
import datetime
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('venue_id', models.IntegerField(unique=True)),
                ('Venue_name', models.CharField(max_length=400)),
                ('Venue_location', models.CharField(max_length=400)),
                ('About', ckeditor.fields.RichTextField()),
                ('type_of_hall', models.CharField(choices=[('Banquet Hall', 'Banquet Hall'), ('Function Hall', 'Function Hall')], max_length=255)),
                ('Food_type', models.CharField(choices=[('Pure_Veg', 'Pure_Veg'), ('Non_Veg', 'Non_Veg'), ('Both', 'Both')], max_length=50)),
                ('Dining_hall_capacity', models.IntegerField()),
                ('per_plate_prize', models.CharField(max_length=50)),
                ('list_image', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('banner_image1', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('banner_image2', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('banner_image3', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('banner_image4', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('extra_image1', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('extra_image2', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('extra_image3', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('map_location', models.URLField(max_length=250, null=True)),
                ('vimeo_video', models.URLField(max_length=250, null=True)),
                ('Parking_capacity', models.IntegerField(default=100)),
                ('Rating', models.FloatField(default=3.0)),
                ('created_date', models.DateTimeField(default=datetime.datetime.now)),
                ('Hall_rent_cost', models.CharField(choices=[('below 10,000', 'below 10,000'), ('10,000 - 25,000 ', '10,000 - 25,000 '), ('25,000 - 50,000', '25,000 - 50,000'), ('50,000 - 75,000 ', '50,000 - 75,000 '), ('75,000 - 1,00,000', '75,000 - 1,00,000'), ('1,00,000 -1,50,000 ', '1,00,000 -1,50,000 '), ('1,50,000 -2,00,000 ', '1,50,000 -2,00,000 '), ('More than 2,00,000', 'More than 2,00,000')], default='', max_length=50)),
                ('select_event', multiselectfield.db.fields.MultiSelectField(choices=[('Wedding', 'Wedding'), ('Birthday Party', 'Birthday Party'), ('Engagement', 'Engagement'), ('Naming Ceremony', 'Naming Ceremony'), ('Reception', 'Reception'), ('Anniversary', 'Anniversary'), ('Small Function', 'Small Functions'), ('Other', 'Other')], default='Wedding', max_length=92)),
                ('Aminities', multiselectfield.db.fields.MultiSelectField(choices=[('VEG AND NON VEG', 'VEG AND NON VEG'), ('CAR PARKING LOT', 'CAR PARKING LOT'), ('AC ROOM ', 'AC ROOM '), ('TWO WHEELER PARKING', 'TWO WHEELER PARKING'), ('Concrete Flooring', 'Concrete Flooring')], default='Two-Whiller Parking', max_length=78)),
                ('services', multiselectfield.db.fields.MultiSelectField(choices=[('Clean Rooms', 'Clean Rooms'), ('Free WIFI', 'Free Wifi'), ('Catering', 'catering'), ('Light System', 'Light System'), ('Water supply Free', 'Water Supply Free'), ('Decoration', 'Decoration'), ('Special Menus', 'Special Menus')], default='Decoration', max_length=86)),
                ('menus', multiselectfield.db.fields.MultiSelectField(choices=[('Dessert', 'Dessert'), ('North-Indian', 'North-Indian'), ('South-Indian', 'South-Indian'), ('Indian Snacks', 'Indian Snacks'), ('Ice-cream', 'Ice-cream')], default='Indian Dessert', max_length=57)),
                ('people_count', multiselectfield.db.fields.MultiSelectField(choices=[('1-49', '1-49'), ('50-99', '50-99'), ('100-149', '100-149'), ('149-250', '149-250'), ('250-399', '250-399'), ('400-499', '400-499'), ('500-799', '800-999'), ('More Than 1000', 'More than 1000')], default='100', max_length=65)),
                ('owner_name', models.CharField(blank=True, default='', max_length=100)),
                ('about_owner', models.CharField(blank=True, default='', max_length=250)),
                ('phone', models.CharField(blank=True, default='', max_length=12)),
                ('mobile', models.CharField(blank=True, default='', max_length=12)),
                ('email', models.EmailField(blank=True, default='', max_length=254)),
                ('whatsapp_no', models.CharField(blank=True, default='', max_length=12)),
                ('Total_reviews', models.FloatField()),
                ('Response_time', models.FloatField()),
                ('Quality_of_service', models.FloatField()),
                ('Catering_service', models.FloatField()),
                ('Overall_rating', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ReviewRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=150)),
                ('review', models.TextField(blank=True, max_length=500)),
                ('rating', models.FloatField()),
                ('ip', models.CharField(blank=True, max_length=20)),
                ('status', models.BooleanField(default=True)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('updated_date', models.DateField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.user')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='venues.venue')),
            ],
        ),
    ]
